# this_file: _github/workflows/release.yml
# Release workflow for claif_gem

name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags (e.g., v1.0.0)
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

env:
  PYTHON_VERSION: '3.12'

jobs:
  # Validate release
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            TAG="v${VERSION}"
          else
            TAG="${{ github.ref_name }}"
            VERSION="${TAG#v}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Releasing version: ${VERSION}"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! "${VERSION}" =~ ^[0-9]+\.[0-9]+\.[0-9]+([a-zA-Z0-9\-\.]*)?$ ]]; then
            echo "❌ Invalid version format: ${VERSION}"
            echo "Expected format: X.Y.Z or X.Y.Z-suffix"
            exit 1
          fi
          echo "✅ Valid version format: ${VERSION}"

      - name: Run full test suite
        run: |
          pytest tests/unit -v --cov=src/claif_gem
          
      - name: Check code quality
        run: |
          ruff check src/claif_gem tests
          ruff format --check src/claif_gem tests
          mypy src/claif_gem

  # Build packages
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine hatch

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*
          
      - name: Verify package contents
        run: |
          pip install dist/*.whl
          python -c "
          import claif_gem
          print(f'Package version: {claif_gem.__version__}')
          print(f'Expected version: ${{ needs.validate.outputs.version }}')
          assert claif_gem.__version__ == '${{ needs.validate.outputs.version }}'
          print('✅ Version verification passed')
          "

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-${{ needs.validate.outputs.version }}
          path: dist/

  # Create GitHub release
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-${{ needs.validate.outputs.version }}
          path: dist/

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          
          # Generate changelog for this version
          if [[ -f CHANGELOG.md ]]; then
            # Extract section for this version from CHANGELOG.md
            awk "/^## \[?${VERSION}\]?|^## v${VERSION}/ {flag=1; next} /^## / {flag=0} flag" CHANGELOG.md > release_notes.md
            
            if [[ ! -s release_notes.md ]]; then
              echo "No changelog entry found for version ${VERSION}"
              echo "## What's Changed" > release_notes.md
              echo "" >> release_notes.md
              echo "See [CHANGELOG.md](CHANGELOG.md) for details." >> release_notes.md
            fi
          else
            echo "## What's Changed" > release_notes.md
            echo "" >> release_notes.md
            echo "This release includes various improvements and bug fixes." >> release_notes.md
          fi
          
          # Add installation instructions
          cat >> release_notes.md << 'EOF'
          
          ## Installation
          
          ```bash
          pip install claif_gem==${{ needs.validate.outputs.version }}
          ```
          
          ## Full Changelog
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ needs.validate.outputs.version }}...HEAD
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate.outputs.tag }}
          name: Release ${{ needs.validate.outputs.tag }}
          body_path: release_notes.md
          files: |
            dist/*
          draft: false
          prerelease: ${{ contains(needs.validate.outputs.version, '-') }}
          generate_release_notes: true

  # Publish to PyPI
  pypi-release:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate, build, github-release]
    environment:
      name: pypi
      url: https://pypi.org/p/claif_gem
    permissions:
      id-token: write  # For trusted publishing
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-${{ needs.validate.outputs.version }}
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          print-hash: true

  # Update documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [validate, pypi-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs-material mkdocs-git-revision-date-localized-plugin mkdocs-minify-plugin
          pip install mkdocs-mermaid2-plugin pymdown-extensions

      - name: Update version in documentation
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          # Update version in mkdocs.yml
          sed -i "s/version: \".*\"/version: \"${VERSION}\"/" src_docs/mkdocs.yml

      - name: Build and deploy documentation
        working-directory: src_docs
        run: |
          mkdocs build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          cname: claif-gem.twardoch.com  # Optional: if you have a custom domain

  # Post-release tasks
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate, pypi-release]
    if: always() && needs.pypi-release.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create post-release issue
        uses: actions/github-script@v6
        with:
          script: |
            const version = '${{ needs.validate.outputs.version }}';
            const issueBody = `
            ## Post-Release Checklist for v${version}
            
            - [ ] Verify PyPI package is available: https://pypi.org/project/claif_gem/${version}/
            - [ ] Test installation: \`pip install claif_gem==${version}\`
            - [ ] Update documentation if needed
            - [ ] Announce release on relevant channels
            - [ ] Update dependent projects if any
            - [ ] Monitor for any issues or bug reports
            
            **Release Links:**
            - GitHub Release: ${{ github.server_url }}/${{ github.repository }}/releases/tag/v${version}
            - PyPI Package: https://pypi.org/project/claif_gem/${version}/
            - Documentation: https://twardoch.github.io/claif_gem/
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Post-release tasks for v${version}`,
              body: issueBody,
              labels: ['release', 'maintenance']
            });

      - name: Send notification
        run: |
          echo "🚀 Release ${{ needs.validate.outputs.version }} completed successfully!"
          echo "📦 PyPI: https://pypi.org/project/claif_gem/${{ needs.validate.outputs.version }}/"
          echo "📖 Docs: https://twardoch.github.io/claif_gem/"
          echo "🏷️ GitHub: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.tag }}"