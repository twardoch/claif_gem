# this_file: _github/workflows/ci.yml
# Comprehensive CI workflow for claif_gem

name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION_MAIN: '3.12'

jobs:
  # Code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_MAIN }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"

      - name: Run ruff linting
        run: |
          ruff check src/claif_gem tests --output-format=github

      - name: Run ruff formatting check
        run: |
          ruff format --check src/claif_gem tests

      - name: Run mypy type checking
        run: |
          mypy src/claif_gem --strict

  # Unit tests across Python versions
  test:
    name: Tests (Python ${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.12', '3.13']
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"

      - name: Run unit tests
        run: |
          pytest tests/unit -v --tb=short --cov=src/claif_gem --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        if: matrix.python-version == env.PYTHON_VERSION_MAIN && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Integration tests (only on main Python version)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_MAIN }}
          cache: 'pip'

      - name: Set up Node.js for Gemini CLI
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"

      - name: Install Gemini CLI
        run: |
          npm install -g @google/gemini-cli

      - name: Run integration tests
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          pytest tests/integration -v --tb=short
        continue-on-error: true  # Don't fail CI if no API key available

  # Documentation build test
  docs:
    name: Documentation Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_MAIN }}
          cache: 'pip'

      - name: Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs-material mkdocs-git-revision-date-localized-plugin mkdocs-minify-plugin
          pip install mkdocs-mermaid2-plugin pymdown-extensions

      - name: Build documentation
        working-directory: src_docs
        run: |
          mkdocs build --strict

      - name: Test documentation links
        working-directory: src_docs
        run: |
          # Check for broken internal links
          mkdocs build --strict 2>&1 | grep -i "warning\|error" || true

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_MAIN }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"
          pip install safety bandit

      - name: Run safety check
        run: |
          safety check --json || true

      - name: Run bandit security linting
        run: |
          bandit -r src/claif_gem -f json || true

  # Performance benchmarks
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_MAIN }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"
          pip install pytest-benchmark

      - name: Run performance tests
        run: |
          pytest tests/performance -v --benchmark-only --benchmark-json=benchmark.json || true

      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        if: github.ref == 'refs/heads/main'
        with:
          tool: 'pytest'
          output-file-path: benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

  # Build and test package
  package:
    name: Package Build
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_MAIN }}
          cache: 'pip'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine hatch

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Test package installation
        run: |
          pip install dist/*.whl
          python -c "import claif_gem; print(f'Successfully imported claif_gem v{claif_gem.__version__}')"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  # Summary job
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [quality, test, integration, docs, security, package]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.quality.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.docs.result }}" == "success" && \
                "${{ needs.security.result }}" == "success" && \
                "${{ needs.package.result }}" == "success" ]]; then
            echo "✅ All CI jobs passed!"
            exit 0
          else
            echo "❌ Some CI jobs failed"
            echo "Quality: ${{ needs.quality.result }}"
            echo "Tests: ${{ needs.test.result }}"
            echo "Integration: ${{ needs.integration.result }}"
            echo "Docs: ${{ needs.docs.result }}"
            echo "Security: ${{ needs.security.result }}"
            echo "Package: ${{ needs.package.result }}"
            exit 1
          fi